#! /bin/bash

# Solve connect-4 using a combination of a C++ program ('connect4') and the
# standard 'sort' tool.

set -e

# Add the current directory to the PATH, so we can find the 'connect4' executable.

CONNECT4=$PWD/connect4

if [ ! -x "$CONNECT4" ] ; then
    echo "The 'connect4' executable is not available. Use 'make' to create it."
    exit 1
fi

# Get the size of the board we're processing.
echo
echo "Compile-time constants:"
echo
$CONNECT4 --print-constants | tee variables.tmp
echo

source variables.tmp
rm variables.tmp

let MAX_GEN=H_SIZE*V_SIZE

# Check that TMDIR is set. It is used by 'sort' to know where to put temporary files.
# Note that these can be large, and there can be many of them!
# Ideally, TMPDIR should point to a different disk than the one where data is being
# read from / written to.

if [ -z "$TMPDIR" ] ; then
    echo "Please set the environment variable TMPDIR for 'sort' temporary files."
    exit 1
fi

if [ -z "$DATADIR" ] ; then
    echo "Please set the environment variable DATADIR to the directory where generated files go."
    exit 1
fi

# Make sure the datadir exists.
mkdir -p $DATADIR

FILENAME_PREFIX=${DATADIR}/connect${CONNECT_Q}_${H_SIZE}x${V_SIZE}

# Make the sort tool stupid (sort by byte order).
#
# The man page of sort says:
#
#     *** WARNING *** The locale specified by the environment affects sort order.
#     Set LC_ALL=C to get the traditional sort order that uses native byte values.

export LC_ALL=C

# Forward stage: expand game tree starting at the initial (empty) board.

echo "Performing forward game-tree traversal ..."

# Write the initial node.

$CONNECT4 --make-initial-node STDOUT | tee ${FILENAME_PREFIX}_nodes_0.dat | wc -l > ${FILENAME_PREFIX}.log

# Forward stage: generate all nodes.

for ((curr=0; curr <= MAX_GEN - 1; ++curr)) do
    let next=curr+1
    echo "  forward: $curr -> $next"
    $CONNECT4 --make-nodes ${FILENAME_PREFIX}_nodes_$curr.dat STDOUT | sort -u | tee ${FILENAME_PREFIX}_nodes_$next.dat | wc -l >> ${FILENAME_PREFIX}.log
done

# Backward stage: propagate finalized node evaluations backwards.

echo "Performing backward game-tree traversal ..."

# The last nodes file is already fully correct w.r.t. scores.

mv ${FILENAME_PREFIX}_nodes_$((MAX_GEN)).dat ${FILENAME_PREFIX}_nodes_with_score_$((MAX_GEN)).dat

# Do backward traversal.

for ((curr=MAX_GEN - 1; curr >= 0; --curr)) do
    let next=curr+1
    echo "  backward: $next -> $curr"
    $CONNECT4 --make-edges ${FILENAME_PREFIX}_nodes_$curr.dat STDOUT | sort |
      $CONNECT4 --make-edges-with-score STDIN ${FILENAME_PREFIX}_nodes_with_score_$next.dat STDOUT | sort -u |
        $CONNECT4 --make-nodes-with-score ${FILENAME_PREFIX}_nodes_$curr.dat STDIN ${FILENAME_PREFIX}_nodes_with_score_$curr.dat
    rm ${FILENAME_PREFIX}_nodes_$curr.dat
done

# Merge-sort the nodes_with_score files together.

echo "Merging all generated nodes_with_score files ..."

sort -m ${FILENAME_PREFIX}_nodes_with_score_*.dat > ${FILENAME_PREFIX}.dat

echo "Converting data to binary ..."

# We use the "new" extension to prevent confusion with the legacy "bin" format.
$CONNECT4 --make-binary-file ${FILENAME_PREFIX}.dat ${FILENAME_PREFIX}.new

echo "All done!"

# Afterwards, we may want to compress the generated binary file.
#
# However, the compression rate can drastically be improved by judicious use
# of xz's filters. In particular, if the "--delta" filter is configured with
# a distance parameter equal to the record size in the binary file (i.e.,
# the number of bytes needed to represent one board, plus a single byte to
# represent its outcome), the compression ratio will improve vastly.
#
# As an example:
#
# connect4_5x4.new        9870870    ; uncompressed
# connect4_5x4.new.xz     2364516    ; xz connect4_5x4.new
# connect4_5x4.new.xz     2364452    ; xz -9 connect4_5x4.new
# connect4_5x4.new.xz      790120    ; xz --delta=dist=5 --lzma2=dict=64MiB,lc=2,lp=0,pb=0,mf=bt3,mode=normal,nice=235,depth=0  connect4_5x4.new  )optimal settings)
#
#
# Some optimal flag choices:
#
# xz --delta=dist=4 --lzma2=dict=64MiB,lc=0,lp=2,pb=2,mf=bt3,mode=normal,nice=117,depth=0 connect4_4x4.new  #       322164 -->     36688
# xz --delta=dist=4 --lzma2=dict=64MiB,lc=1,lp=2,pb=2,mf=bt2,mode=normal,nice=152,depth=0 connect4_4x5.new  #      3412740 -->    328396
# xz --delta=dist=5 --lzma2=dict=64MiB,lc=2,lp=0,pb=0,mf=bt3,mode=normal,nice=235,depth=0 connect4_5x4.new  #      9870870 -->    790120
# xz --delta=dist=5 --lzma2=dict=64MiB,lc=4,lp=0,pb=0,mf=bt3,mode=normal,nice=266,depth=0 connect4_5x5.new  #    174441835 -->  10899820
# xz --delta=dist=6 --lzma2=dict=64MiB,lc=3,lp=1,pb=1,mf=bt2,mode=normal,nice=272,depth=0 connect4_5x6.new  #   3133181598 --> 116887316
# xz --delta=dist=6 --lzma2=dict=64MiB,lc=3,lp=1,pb=1,mf=bt4,mode=normal,nice=273,depth=0 connect4_6x5.new  #   8456931210 --> 300771484
# xz ------------------------------------------------------------------------------------ connect4_6x6.new  # 242105656233 --> (TBD; in progress)
# xz ------------------------------------------------------------------------------------ connect4_6x7.new  #        (TBD) --> (TBD)
# xz ------------------------------------------------------------------------------------ connect4_7x6.new  #        (TBD) --> (TBD)
