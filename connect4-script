#! /bin/bash

# Solve connect-4 using a combination of a C++ program ('connect4') and the
# standard 'sort' tool.

set -e

# Substitute an appropriate temporary directory here.
# Ideally, it should be on a different disk.

export TMPDIR=/tmp

# Make the sort tool stupid (sort by byte order).
#
# The man page of sort says:
#
#     *** WARNING *** The locale specified by the environment affects sort order.
#     Set LC_ALL=C to get the traditional sort order that uses native byte values.

export LC_ALL=C

# Write the initial node.

let H_SIZE=`./connect4 --horizontal-size`
let V_SIZE=`./connect4 --vertical-size`

let MAX_GEN=H_SIZE*V_SIZE

echo "Preparing forward traversal ..."

./connect4 --make-initial-node nodes_0.dat
wc -l nodes_0.dat > nodes.log

# Forward stage: generate all nodes.

for ((curr=0; curr <= MAX_GEN - 1; ++curr)) do
    let next=curr+1
    echo "  forward: $curr -> $next"
    ./connect4 --make-nodes nodes_$curr.dat STDOUT | sort -u > nodes_$next.dat
    wc -l nodes_$next.dat >> nodes.log
done

# Backward stage: propagate finalized node evaluations backwards.
echo "Preparing backward traversal ..."
# The last nodes file is already fully correct w.r.t. scores.
mv nodes_$((MAX_GEN)).dat nodes_with_score_$((MAX_GEN)).dat

for ((curr=MAX_GEN - 1; curr >= 0; --curr)) do
    let next=curr+1
    echo "  backward: $next -> $curr"
    ./connect4 --make-edges nodes_$curr.dat STDOUT | sort |
      ./connect4 --make-edges-with-score STDIN nodes_with_score_$next.dat STDOUT | sort -u |
        ./connect4 --make-nodes-with-score nodes_$curr.dat STDIN nodes_with_score_$curr.dat
    rm nodes_$curr.dat
done

# Merge-sort the nodes_with_score files together.
echo "Merging all nodes_with_score files ..."
sort -m nodes_with_score_*.dat > connect4.dat
